
#//////////////////////////////////////////// https://t.me/lolzteam_lolz \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import sqlite3
import logging
import time
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardRemove

from data.config import *
from func import *


bot = Bot(TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot,storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)


line = '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'

class NakrutkaState(StatesGroup):
    GET_NAKRUTKA_SUBSCRIBERS = State()
    GET_NAKRUTKA_POLL_VOTES = State()
    GET_NAKRUTKA_LIKES = State()
    CONFIRM_NAKRUTKA = State()
    
class CARD(StatesGroup):
    money = State()

class CheckoutForm(StatesGroup):
    waiting_for_photo = State()

class TRANSFER(StatesGroup):
    user = State()
    money = State()

class GET_TEXT_RASSILKA(StatesGroup):
    TEXT = State()

class GET_PHOTO_RASSILKA(StatesGroup):
    PHOTO = State()
    TEXT = State()
    START = State()

class GET_USERS_BALANCE(StatesGroup):
    US_ID = State()
    SUMMA = State()


async def anti_flood(*args, **kwargs):
    m = args[0]
    try:
        await m.answer("üìõ –ù–µ —Ñ–ª—É–¥–∏!", show_alert =True)
    except:
        await m.answer("üìõ –ù–µ —Ñ–ª—É–¥–∏!")

@dp.callback_query_handler(text = 'menu')
async def get_menu(call):
    await menu(call.from_user.id)
#–°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
@dp.throttled(anti_flood,rate=0)
async def start(message):
        conn = sqlite3.connect('data/db.db', check_same_thread = False)
        cursor = conn.cursor()
        in_base = await CHECK_IN_BASE(message.from_user.id)
        if in_base != None:
            await menu(message.from_user.id)
        else:
            cursor.execute('INSERT INTO users (user_id) VALUES (?)', (message.from_user.id,))
            conn.commit()
            await menu(message.from_user.id)

@dp.message_handler(text = 'üë®‚Äçüíª –£—Å–ª—É–≥–∏')
@dp.throttled(anti_flood,rate=0)
async def get_profile(message):
    await get_nakrutka(message)

@dp.message_handler(text = '–ë–∞–ª–∞–Ω—Å')
@dp.throttled(anti_flood,rate=0)
async def get_menu(message):
    await get_money(message)

@dp.message_handler(text = 'get_money')
@dp.throttled(anti_flood,rate=0)
async def get_money(message):
    await message.answer(text=f'<b>üë§ –í–∞—à ID:<code>{message.from_user.id}</code>\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:</b> <i>{await get_user_balance(message.from_user.id)} RUB</i>', reply_markup = await payments_keyboard())

@dp.callback_query_handler(text_contains = 'Popa')
async def CARD_METHOD(call):
    await CARD.money.set()
    await call.message.answer(text=
        '‚Äî –ú–∏–Ω–∏–º—É–º: <b>10 RUB</b>\n\n'
        f'<b>üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö</b>',)

@dp.message_handler(state=CARD.money)
async def get_summa(message: types.Message, state: FSMContext):
    try:
        if float(message.text) >= 10:
            await CARD_PAY(message.text, message.from_user.id)
        else:
            await message.answer(
                '<b>‚ö†Ô∏è –ú–∏–Ω–∏–º—É–º: 10 RUB!</b>'
            )
    except ValueError:
        await message.answer(
            '<b>‚ùóÔ∏è–°—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!</b>'
        )
    await state.finish()

@dp.callback_query_handler(text_contains='CheckCard_')
async def check_card_func(call):
    await CheckoutForm.waiting_for_photo.set()
    await call.message.answer('<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫</b>')

@dp.message_handler(content_types=types.ContentTypes.PHOTO, state=CheckoutForm.waiting_for_photo)
async def handle_photo(message: types.Message, state: FSMContext, callback_data: dict = None):
    photo_file_id = message.photo[-1].file_id
    chat_id = message.from_user.id
    await bot.send_photo(LOG_DIALOG, photo_file_id, caption=f'üí∏üí∏–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–ø–ª–∞—Ç—É')
    
    await state.finish()
    await menu(message.from_user.id)
    await message.answer('<b>–û–∂–∏–¥–∞–π—Ç–µ...</b>')
    

@dp.message_handler(text='–ù–∞–∫—Ä—É—Ç–∫–∞')
async def get_nakrutka(message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard = True)
    keyboard.add(types.KeyboardButton(text='üë®üèº–ü–æ–¥–ø–∏—Å—á–∏–∫–∏'),
                types.KeyboardButton(text='üó£–ì–æ–ª–æ—Å–∞ –Ω–∞ –æ–ø—Ä–æ—Å')),
    keyboard.add(types.KeyboardButton(text='üëç–õ–∞–π–∫–∏')),
    await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–∫—Ä—É—Ç–∫–∏:</b>', reply_markup=keyboard)

@dp.message_handler(Text(equals='üë®üèº–ü–æ–¥–ø–∏—Å—á–∏–∫–∏'))
async def get_nakrutka_subscribers(message, state: FSMContext):
    await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:</b>')
    await NakrutkaState.GET_NAKRUTKA_SUBSCRIBERS.set()

@dp.message_handler(Text(equals='üó£–ì–æ–ª–æ—Å–∞ –Ω–∞ –æ–ø—Ä–æ—Å'))
async def get_nakrutka_poll_votes(message, state: FSMContext):
    await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:</b>')
    await NakrutkaState.GET_NAKRUTKA_POLL_VOTES.set()

@dp.message_handler(Text(equals='üëç–õ–∞–π–∫–∏'))
async def get_nakrutka_likes(message, state: FSMContext):
    await message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å:</b>')
    await NakrutkaState.GET_NAKRUTKA_LIKES.set()

@dp.message_handler(lambda message: message.text.isdigit(), state=NakrutkaState.GET_NAKRUTKA_SUBSCRIBERS)
@dp.message_handler(lambda message: message.text.isdigit(), state=NakrutkaState.GET_NAKRUTKA_POLL_VOTES)
@dp.message_handler(lambda message: message.text.isdigit(), state=NakrutkaState.GET_NAKRUTKA_LIKES)
async def process_nakrutka(message, state: FSMContext):
    count = int(message.text)
    current_state = await state.get_state()
    service_types = None
    if current_state == NakrutkaState.GET_NAKRUTKA_SUBSCRIBERS.state:
        cost = await get_subscribers_cost(count)
        service_types = '–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ üë®üèº'
    elif current_state == NakrutkaState.GET_NAKRUTKA_POLL_VOTES.state:
        cost = await get_poll_votes_cost(count)
        service_types = '–≥–æ–ª–æ—Å–æ–≤ üó£'
    elif current_state == NakrutkaState.GET_NAKRUTKA_LIKES.state:
        cost = await get_likes_cost(count)
        service_types = 'üëç–ª–∞–π–∫–æ–≤'
    else:
        await message.answer('‚ùå <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –Ω–∞–∫—Ä—É—Ç–∫–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.</b>')
        await state.finish()
        await menu(message.from_user.id)
        return
    cena = round(cost, 2)
    await message.answer(f'<b>–ù–∞–∫—Ä—É—Ç–∫–∞ {service_types} –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å {cena} —Ä—É–±. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∫—É:</b>',
                         reply_markup=types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True).add(
                             types.KeyboardButton(text='–î–∞'),
                             types.KeyboardButton(text='–û—Ç–º–µ–Ω–∞')
                         ))
    await state.update_data(count=count, cost=cost, service_types=service_types)
    await NakrutkaState.CONFIRM_NAKRUTKA.set()

@dp.message_handler(Text(equals='–î–∞'), state=NakrutkaState.CONFIRM_NAKRUTKA)
async def confirm_nakrutka(message, state: FSMContext):
    data = await state.get_data()
    conn = sqlite3.connect('data/db.db', check_same_thread = False)
    cursor = conn.cursor()
    service_type = data.get('service_types')
    cost = data.get('cost')
    cena = round(cost, 2)
    conn = sqlite3.connect('data/db.db', check_same_thread = False)
    cursor = conn.cursor()
    user_id=message.from_user.id
    balance = float(await get_user_balance(user_id))
    if balance < (float(cena)):
        await message.answer(f'<b>–í–∞—à –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞.</b>',
                         reply_markup=ReplyKeyboardRemove())
        await state.finish()
        await menu(message.from_user.id)
    else:
        cursor.execute('UPDATE users SET balance = balance - (?) WHERE user_id = (?)', (cena, user_id))
        conn.commit()
        await message.answer(f'<b>–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ –Ω–∞–∫—Ä—É—Ç–∫—É <i>{service_type}</i> –∑–∞ {cena} —Ä—É–±. –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.</b>',
                            reply_markup=ReplyKeyboardRemove())
        await bot.send_message(chat_id=LOG_DIALOG, text=f'‚ÄºÔ∏è {user_id} –∑–∞–∫–∞–∑–∞–ª –Ω–∞–∫—Ä—É—Ç–∫—É <i>{service_type}</i> –∑–∞ {cena} —Ä—É–±.\n\n–†–∞–±–æ—Ç–∞–µ–º.')
        await state.finish()
        await menu(message.from_user.id)

@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞'), state=NakrutkaState.CONFIRM_NAKRUTKA)
async def cancel_nakrutka(message, state: FSMContext):
    await message.answer('–ù–∞–∫—Ä—É—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=ReplyKeyboardRemove())
    await state.finish()
    await menu(message.from_user.id)

#////////////////////////////////////////////–ê–î–ú–ò–ù–ö–ê\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\


@dp.message_handler(text_contains="–ê–¥–º–∏–Ω–∫–∞")
@dp.throttled(anti_flood,rate=0)
async def get_adminmenu(message):
    adminka = await get_admin_status(message.from_user.id)
    if adminka == 1:
        await adminmenu(message.from_user.id)

#–í—ã–¥–∞—á–∞ –±–∞–ª–∞–Ω—Å–∞
@dp.message_handler(text_contains="–í—ã–¥–∞—Ç—å/–ó–∞–±—Ä–∞—Ç—å –±–∞–ª–∞–Ω—Å")
@dp.throttled(anti_flood,rate=0)
async def get_for_user_balance(message):
    adminka = await get_admin_status(message.from_user.id)
    if adminka == 1:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        await GET_USERS_BALANCE.US_ID.set()


@dp.message_handler(state=GET_USERS_BALANCE.US_ID)
@dp.throttled(anti_flood,rate=0)
async def get_summa_for_user_balance(message, state):
    conn = sqlite3.connect('data/db.db', check_same_thread=False)
    cursor = conn.cursor()
    info = cursor.execute('SELECT * FROM users WHERE user_id = (?)', (message.text,)).fetchall()
    if info == []:
        await message.answer('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        await state.finish()
        await adminmenu(message.from_user.id)
    else:
        await message.answer('<i>–ß—Ç–æ–±—ã –æ—Ç–Ω—è—Ç—å —Å—É–º–º—É –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å –º–∏–Ω—É—Å–æ–º (–ù–∞–ø—Ä–∏–º–µ—Ä -1000)</i>\n\n<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:</b>')
        await state.update_data(us_id = message.text)
        await GET_USERS_BALANCE.SUMMA.set()
    conn.close()

@dp.message_handler(state=GET_USERS_BALANCE.SUMMA)
@dp.throttled(anti_flood,rate=0)
async def start_get_balance(message, state):
    adminka = await get_admin_status(message.from_user.id)
    if adminka == 1:
        if message.text.startswith('-'):
            money = message.text[1:]
            if money.isdigit():
                user_data = await state.get_data()
                us_id = user_data['us_id']
                conn = sqlite3.connect('data/db.db', check_same_thread=False)
                cursor = conn.cursor()
                cursor.execute('UPDATE users SET balance = balance + (?) WHERE user_id = (?)', (message.text, us_id))
                conn.commit()
                await message.answer(f'–£—Å–ø–µ—à–Ω–æ!\n–ë–∞–ª–∞–Ω—Å {us_id} —Ç–µ–ø–µ—Ä—å {await get_user_balance(us_id)} RUB')
                await adminmenu(message.from_user.id)
        elif message.text.isdigit():
            user_data = await state.get_data()
            us_id = user_data['us_id']
            conn = sqlite3.connect('data/db.db', check_same_thread=False)
            cursor = conn.cursor()
            cursor.execute('UPDATE users SET balance = balance + (?) WHERE user_id = (?)', (message.text, us_id))
            conn.commit()
            await bot.send_message(chat_id = us_id, text = f'–ó–∞—á–∏—Å–ª–µ–Ω–æ {message.text} RUB –Ω–∞ –±–∞–ª–∞–Ω—Å!')
            await message.answer(f'–£—Å–ø–µ—à–Ω–æ!\n–ë–∞–ª–∞–Ω—Å {us_id} —Ç–µ–ø–µ—Ä—å {await get_user_balance(us_id)} RUB')
            await adminmenu(message.from_user.id)
        else:
            await message.answer('–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º!')
            await adminmenu(message.from_user.id)
    await state.finish()

#///////////////////////////////////////–†–∞—Å—Å—ã–ª–∫–∞\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

#–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
@dp.message_handler(regexp="–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
@dp.throttled(anti_flood,rate=0)
async def get_rassilka(message):
    adminka = await get_admin_status(message.from_user.id)
    if adminka == 1:
        keyboard = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard=True, row_width = 2)
        buttons = [
        types.KeyboardButton(text='–° —Ñ–æ—Ç–æ'),
        types.KeyboardButton(text='–ë–µ–∑ —Ñ–æ—Ç–æ'),
        types.KeyboardButton(text='–ú–µ–Ω—é')
        ]
        keyboard.add(*buttons)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:', reply_markup = keyboard)

@dp.message_handler(regexp="–ë–µ–∑ —Ñ–æ—Ç–æ")
async def get_text_rassilka(message):
    adminka = await get_admin_status(message.from_user.id)
    if adminka == 1:
        keyboard = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard=True, row_width = 1)
        btn1 = types.KeyboardButton(text = '–ú–µ–Ω—é')
        keyboard.add(btn1)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:', reply_markup = keyboard)
        await GET_TEXT_RASSILKA.TEXT.set()

@dp.message_handler(state=GET_TEXT_RASSILKA.TEXT)
async def start_text_rassilka(message, state):
    adminka = await get_admin_status(message.from_user.id)
    if adminka == 1:
        if message.text != '–ú–µ–Ω—é':
            conn = sqlite3.connect('data/db.db', check_same_thread=False)
            cursor = conn.cursor()
            row = cursor.execute('SELECT user_id FROM users').fetchall()
            succ = 0
            unsucc = 0
            for user in row:
                try:
                    await bot.send_message(chat_id = user[0], text = message.text)
                    succ +=1
                except:
                    unsucc +=1
            conn.close()
            await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {succ}\n–ù–µ –£—Å–ø–µ—à–Ω–æ: {unsucc}')
            await state.finish()
        else:
            await state.finish()
            await adminmenu(message.from_user.id)

# –° —Ñ–æ—Ç–æ
@dp.message_handler(regexp="–° —Ñ–æ—Ç–æ")
async def get_photo_rassilka(message):
    adminka = await get_admin_status(message.from_user.id)
    if adminka == 1:
        keyboard = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard=True, row_width = 1)
        btn1 = types.KeyboardButton(text = '–ú–µ–Ω—é')
        keyboard.add(btn1)
        await GET_PHOTO_RASSILKA.PHOTO.set()
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:')


@dp.message_handler(content_types=["photo"],state=GET_PHOTO_RASSILKA.PHOTO)
async def get2_photo_rassilka(message, state):
    adminka = await get_admin_status(message.from_user.id)
    if adminka == 1:
        photo_id = message.photo[-1].file_id
        await GET_PHOTO_RASSILKA.TEXT.set()
        await state.update_data(rasilka_photo = photo_id)
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç:')



@dp.message_handler(state=GET_PHOTO_RASSILKA.TEXT)
async def start_photo_rassilka(message, state):
    conn = sqlite3.connect('data/db.db', check_same_thread=False)
    cursor = conn.cursor()
    row = cursor.execute('SELECT user_id FROM users').fetchall()
    succ = 0
    unsucc = 0
    user_data = await state.get_data()
    photo = user_data['rasilka_photo']
    for user in row:
        try:
            await bot.send_photo(chat_id = user[0], photo = f'{photo}', caption = message.text)
            succ +=1
        except:
            unsucc +=1
    conn.close()
    keyboard = types.ReplyKeyboardMarkup(one_time_keyboard = True, resize_keyboard=True, row_width = 1)
    btn1 = types.KeyboardButton(text = '–ú–µ–Ω—é')
    keyboard.add(btn1)
    await state.finish()
    await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {succ}\n–ù–µ –£—Å–ø–µ—à–Ω–æ: {unsucc}')
    await adminmenu(message.from_user.id)


while True:
    try:
        if __name__ == "__main__":
            executor.start_polling(dp, skip_updates=True)
        break

    except:
        time.sleep(1)